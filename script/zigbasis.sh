#!/bin/bash

# define the bases to download
BASES=(
    "sto-3g"
    "6-31g"
    "cc-pvdz"
    "cc-pvtz"
    "aug-cc-pvdz"
    "aug-cc-pvtz"
)

# define the atoms to download
ATOMS=(
     [1]="H"
     [6]="C"
     [7]="N"
     [8]="O"
     [9]="F"
    [17]="Cl"
)

# print the initial stuff
echo -e "//! Autogenerated basis sets from BSE. Do not edit manually.\n\nconst std = @import(\"std\");\n\npub const BSE = std.StaticStringMap(std.StaticStringMap([]const f64)).initComptime(.{"

# loop over the bases
for BASIS in ${BASES[@]}; do

    # get the basis set from BSE
    JSON=$(bse get-basis "${BASIS}" json --unc-spdf); echo "    .{\"${BASIS,,}\", std.StaticStringMap([]const f64).initComptime(.{"

    # loop over the atoms
    for I in "${!ATOMS[@]}"; do

        # get the number of contracted Gaussians and print atomic symbol
        NCGS=$(jq ".elements[\"${I}\"].electron_shells | length" <<< "${JSON}");

        # skip if the atom is not in the basis set
        if [ "${NCGS}" -eq 0 ]; then continue; fi

        # print the atomic symbol
        echo -n "        .{\"${ATOMS[$I]}\""

        # print the number of shells and the number of primitives
        echo -n ", &[_]f64{$NCGS"; for J in $(seq 0 $((NCGS - 1))); do
            echo -n ", $(jq ".elements[\"${I}\"].electron_shells[${J}].exponents | length" <<< "${JSON}")"
        done; echo ","

        # loop over the shells
        for J in $(seq 0 $((NCGS - 1))); do

            # print the angular momentum
            echo -en "            "$(jq ".elements[\"${I}\"].electron_shells[${J}].angular_momentum[0]" <<< "${JSON}")",\n               "

            # get the number of primitives
            NPGS=$(jq ".elements[\"${I}\"].electron_shells[${J}].exponents | length" <<< "${JSON}")

            # print the coefficients
            for K in $(seq 0 $((NPGS - 1))); do
                echo -n " "$(jq ".elements[\"${I}\"].electron_shells[${J}].coefficients[0][${K}]" <<< "${JSON}" | sed -E 's/"//g ; s/E/e/g ; s/^([0-9])/ \1/g')","
            done && echo -en "\n               "

            # print the exponents
            for K in $(seq 0 $((NPGS - 1))); do
                echo -n " "$(jq ".elements[\"${I}\"].electron_shells[${J}].exponents[${K}]" <<< "${JSON}" | sed -E 's/"//g ; s/E/e/g ; s/^([0-9])/ \1/g')","
            done && echo ""

        done && echo "        }},"
    done && echo "    })},"
done && echo "});"
